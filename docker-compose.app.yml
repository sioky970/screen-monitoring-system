version: '3.8'

# 应用服务配置 - 前后端直接对接，无需反向代理
# 使用方法：docker-compose -f docker-compose.yml -f docker-compose.app.yml up

services:
  # 后端服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: screen-monitor-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URL: mysql://${MYSQL_USER:-monitor_user}:${MYSQL_PASSWORD:-monitorPass123}@mysql:3306/${MYSQL_DATABASE:-screen_monitoring}
      REDIS_URL: redis://redis:6379
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin123}
      MINIO_BUCKET: ${MINIO_DEFAULT_BUCKETS:-monitoring-screenshots}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      # CORS 配置允许前端访问
      CORS_ORIGIN: http://localhost:${FRONTEND_PORT:-8080}
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    volumes:
      - ./backend/logs:/app/logs
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - screen-monitor-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: screen-monitor-frontend
    restart: unless-stopped
    environment:
      # 前端无需环境变量，API地址通过nginx配置代理到后端容器
      NODE_ENV: ${NODE_ENV:-production}
    ports:
      - "${FRONTEND_PORT:-8080}:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - screen-monitor-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # 移除 nginx 服务，因为前端容器内置 nginx
  # 移除复杂的反向代理配置