version: '3.8'

# 开发环境专用配置
# 使用方式：docker-compose -f docker-compose.yml -f docker-compose.dev.yml up

services:
  mysql:
    environment:
      MYSQL_ROOT_PASSWORD: dev_root_123
      MYSQL_DATABASE: screen_monitoring_dev
      MYSQL_USER: dev_user
      MYSQL_PASSWORD: dev_pass_123
    ports:
      - "33066:3306"  # 避免与本地MySQL冲突
    volumes:
      - ./deployment/docker/mysql/dev-init:/docker-entrypoint-initdb.d

  redis:
    ports:
      - "36379:6379"  # 避免与本地Redis冲突
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  minio:
    environment:
      MINIO_ROOT_USER: devadmin
      MINIO_ROOT_PASSWORD: devadmin123
    ports:
      - "39000:9000"   # API端口
      - "39090:9090"   # 控制台端口

  # 开发工具容器
  adminer:
    image: adminer:latest
    container_name: screen-monitor-adminer
    restart: unless-stopped
    ports:
      - "38080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: mysql
    depends_on:
      - mysql
    networks:
      - screen-monitor-network

  # Redis GUI工具
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: screen-monitor-redis-gui
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "38081:8081"
    depends_on:
      - redis
    networks:
      - screen-monitor-network

  # 后端服务（开发时取消注释）
  # backend-dev:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile.dev
  #   container_name: screen-monitor-backend-dev
  #   restart: unless-stopped
  #   environment:
  #     NODE_ENV: development
  #     DATABASE_URL: mysql://dev_user:dev_pass_123@mysql:3306/screen_monitoring_dev
  #     REDIS_URL: redis://redis:6379
  #     MINIO_ENDPOINT: http://minio:9000
  #     MINIO_ACCESS_KEY: devadmin
  #     MINIO_SECRET_KEY: devadmin123
  #     JWT_SECRET: dev-jwt-secret-key
  #   ports:
  #     - "38001:3001"
  #   volumes:
  #     - ./backend:/app
  #     - backend_node_modules:/app/node_modules
  #   depends_on:
  #     - mysql
  #     - redis
  #     - minio
  #   networks:
  #     - screen-monitor-network

  # 前端服务（开发时取消注释）
  # frontend-dev:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile.dev
  #   container_name: screen-monitor-frontend-dev
  #   restart: unless-stopped
  #   environment:
  #     VITE_API_BASE_URL: http://localhost:38001/api
  #     VITE_WS_BASE_URL: ws://localhost:38001
  #   ports:
  #     - "38000:3000"
  #   volumes:
  #     - ./frontend:/app
  #     - frontend_node_modules:/app/node_modules
  #   depends_on:
  #     - backend-dev
  #   networks:
  #     - screen-monitor-network

# 开发环境专用数据卷
volumes:
  backend_node_modules:
  frontend_node_modules: