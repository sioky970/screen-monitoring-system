version: '3.8'

# 统一的 Docker Compose 配置文件
# 通过 Profiles 机制控制不同环境的服务启动
# 使用方法：
#   开发环境: COMPOSE_PROFILES=dev docker-compose -f docker-compose.unified.yml up -d
#   生产环境: COMPOSE_PROFILES=prod docker-compose -f docker-compose.unified.yml up -d
#   仅基础设施: COMPOSE_PROFILES=infra docker-compose -f docker-compose.unified.yml up -d
#   开发+工具: COMPOSE_PROFILES=dev,tools docker-compose -f docker-compose.unified.yml up -d

services:
  # ===================
  # 基础设施服务
  # ===================
  
  # MySQL 数据库
  mysql:
    image: ${MYSQL_CUSTOM_IMAGE:-screen-monitor-mysql:1.0.0}
    container_name: screen-monitor-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-dev_root_123}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-screen_monitoring_dev}
      MYSQL_USER: ${MYSQL_USER:-dev_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-dev_pass_123}
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_unicode_ci
    ports:
      - "${MYSQL_PORT:-47821}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --sql_mode=STRICT_TRANS_TABLES,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO
    networks:
      - screen-monitor-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD:-dev_root_123}"]
      interval: 30s
      timeout: 10s
      retries: 5
    profiles:
      - infra
      - dev
      - prod

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: screen-monitor-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-47822}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - screen-monitor-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    profiles:
      - infra
      - dev
      - prod

  # MinIO 对象存储
  minio:
    image: minio/minio:latest
    container_name: screen-monitor-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-devadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-devadmin123}
      MINIO_DEFAULT_BUCKETS: ${MINIO_DEFAULT_BUCKETS:-monitoring-screenshots}
    ports:
      - "${MINIO_API_PORT:-47823}:9000"
      - "${MINIO_CONSOLE_PORT:-47824}:9090"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9090"
    networks:
      - screen-monitor-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    profiles:
      - infra
      - dev
      - prod

  # ===================
  # 开发环境应用服务
  # ===================

  # 后端服务 - 开发环境
  backend-dev:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: screen-monitor-backend-dev
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      USE_DEV_DATABASE: false
      DB_HOST: mysql
      DB_PORT: 3306
      DB_USERNAME: ${MYSQL_USER:-dev_user}
      DB_PASSWORD: ${MYSQL_PASSWORD:-dev_pass_123}
      DB_DATABASE: ${MYSQL_DATABASE:-screen_monitoring_dev}
      DB_SYNCHRONIZE: true
      REDIS_HOST: redis
      REDIS_PORT: 6379
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-devadmin}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-devadmin123}
      JWT_SECRET: ${JWT_SECRET:-dev-jwt-secret-key}
    ports:
      - "${BACKEND_DEV_PORT:-47828}:3000"
      - "${DEBUG_PORT:-47829}:9229"
      - "${WS_DEV_PORT:-3005}:3005"
    volumes:
      - ./backend/src:/app/src
      - ./backend/package.json:/app/package.json
      - ./backend/tsconfig.json:/app/tsconfig.json
      - backend_node_modules:/app/node_modules
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - screen-monitor-network
    profiles:
      - dev
    command: npm run start:dev

  # 前端服务 - 开发环境
  frontend-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: screen-monitor-frontend-dev
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      VITE_API_BASE_URL: http://backend-dev:3000/api
      VITE_BACKEND_ORIGIN: http://backend-dev:3000
    ports:
      - "${FRONTEND_DEV_PORT:-47827}:3000"
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/package.json:/app/package.json
      - ./frontend/vite.config.ts:/app/vite.config.ts
      - ./frontend/tsconfig.json:/app/tsconfig.json
      - ./frontend/index.html:/app/index.html
      - frontend_node_modules:/app/node_modules
    depends_on:
      - backend-dev
    networks:
      - screen-monitor-network
    profiles:
      - dev
    command: npm run dev -- --host 0.0.0.0

  # ===================
  # 生产环境应用服务
  # ===================

  # 后端服务 - 生产环境（支持热重载开发）
  backend-prod:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: screen-monitor-backend-prod
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DB_HOST: mysql
      DB_PORT: 3306
      DB_USERNAME: ${MYSQL_USER:-dev_user}
      DB_PASSWORD: ${MYSQL_PASSWORD:-dev_pass_123}
      DB_DATABASE: ${MYSQL_DATABASE:-screen_monitoring_dev}
      DB_SYNCHRONIZE: ${DB_SYNCHRONIZE:-true}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-devadmin}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-devadmin123}
      JWT_SECRET: ${JWT_SECRET:-dev-jwt-secret-key}
    ports:
      - "${BACKEND_PORT:-47831}:3000"
      - "${WS_PORT:-3005}:3005"
      - "${DEBUG_PORT:-47829}:9229"
    volumes:
      - ./backend/src:/app/src
      - ./backend/package.json:/app/package.json
      - ./backend/tsconfig.json:/app/tsconfig.json
      - backend_node_modules:/app/node_modules
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - screen-monitor-network
    profiles:
      - prod
    command: npm run start:dev

  # 前端服务 - 生产环境（支持热重载开发）
  frontend-prod:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: screen-monitor-frontend-prod
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      VITE_API_BASE_URL: http://localhost:47831/api
      VITE_BACKEND_ORIGIN: http://localhost:47831
    ports:
      - "${FRONTEND_PORT:-47830}:3000"
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/package.json:/app/package.json
      - ./frontend/vite.config.ts:/app/vite.config.ts
      - ./frontend/tsconfig.json:/app/tsconfig.json
      - ./frontend/index.html:/app/index.html
      - frontend_node_modules:/app/node_modules
    depends_on:
      - backend-prod
    networks:
      - screen-monitor-network
    profiles:
      - prod
    command: npm run dev -- --host 0.0.0.0

  # ===================
  # 开发工具服务（可选）
  # ===================

  # 数据库管理工具
  adminer:
    image: adminer:latest
    container_name: screen-monitor-adminer
    restart: unless-stopped
    ports:
      - "${ADMINER_PORT:-47825}:8080"
    environment:
      ADMINER_DEFAULT_SERVER: mysql
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - screen-monitor-network
    profiles:
      - tools

  # Redis GUI工具  
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: screen-monitor-redis-gui
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "${REDIS_GUI_PORT:-47826}:8081"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - screen-monitor-network
    profiles:
      - tools

# 数据卷
volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  backend_node_modules:
    driver: local
  frontend_node_modules:
    driver: local

# 网络
networks:
  screen-monitor-network:
    driver: bridge