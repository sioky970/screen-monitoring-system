version: '3.8'

# 基础设施服务 Docker Compose 配置
# 仅包含数据库、Redis、MinIO等依赖服务
# 前后端应用直接在本地运行

services:
  # ===================
  # 基础设施服务
  # ===================
  
  # MySQL 数据库
  mysql:
    image: mysql:8.0
    container_name: screen-monitor-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-dev_root_123}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-screen_monitoring_dev}
      MYSQL_USER: ${MYSQL_USER:-dev_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-dev_pass_123}
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_unicode_ci
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./deployment/docker/mysql/init:/docker-entrypoint-initdb.d:ro
      - ./deployment/docker/mysql/conf:/etc/mysql/conf.d:ro
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --sql_mode=STRICT_TRANS_TABLES,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO
    networks:
      - screen-monitor-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD:-dev_root_123}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: screen-monitor-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./deployment/docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf --appendonly yes
    networks:
      - screen-monitor-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MinIO 对象存储
  minio:
    image: minio/minio:latest
    container_name: screen-monitor-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-devadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-devadmin123}
      MINIO_DEFAULT_BUCKETS: ${MINIO_DEFAULT_BUCKETS:-monitoring-screenshots}
    ports:
      - "${MINIO_API_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9090"
    volumes:
      - minio_data:/data
      - ./deployment/docker/minio/init:/docker-entrypoint-initdb.d
    command: server /data --console-address ":9090"
    networks:
      - screen-monitor-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # ===================
  # 开发工具服务（可选）
  # ===================

  # 数据库管理工具
  adminer:
    image: adminer:latest
    container_name: screen-monitor-adminer
    restart: unless-stopped
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    environment:
      ADMINER_DEFAULT_SERVER: mysql
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - screen-monitor-network
    profiles:
      - tools

  # Redis GUI工具  
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: screen-monitor-redis-gui
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "${REDIS_GUI_PORT:-8081}:8081"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - screen-monitor-network
    profiles:
      - tools

# 数据卷
volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local

# 网络
networks:
  screen-monitor-network:
    driver: bridge